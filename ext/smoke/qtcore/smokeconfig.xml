<config>
    <moduleName>qtcore</moduleName>
    <scalarTypes>
        <!-- QString is a class, but represented as a scalar (#) in munged names -->
        <typeName>QString</typeName>
    </scalarTypes>
    <voidpTypes>
        <!-- both are classes, but they are represented as Smoke::t_voidp -->
        <typeName>QStringList</typeName>
        <typeName>QString</typeName>
    </voidpTypes>
    <exclude>
        <!-- we don't want private stuff in smoke.. -->
        <signature>.*::d_ptr.*</signature>
        <signature>.*::q_ptr.*</signature>
        <signature>.*\(.*Private.*\).*</signature>
        <signature>.*QUuid::data.*</signature>
        <signature>.*QBitArray::data_ptr.*</signature>
        <signature>.*QByteArray::data_ptr.*</signature>
        <signature>.*QLocale::p</signature>
        <signature>.*QLocale::v</signature>
        <signature>.*QByteArrayMatcher::dummy</signature>
        <signature>.*QByteArrayMatcher::p</signature>
        <signature>.*QStringMatcher::q_data</signature>
        <signature>.*QStringMatcher::p</signature>
        <signature>.*QDateTime::d</signature>
        <!-- Function pointers in parameters in general; they need local
             typdefs to be definable. -->
        <signature>.*\(.*\(\*\).*\).*</signature>
        <!-- unsigned int[] cast needs local typedef to work -->
        <signature>unsigned int\[3\] QTextCodec::ConverterState::state_data</signature>
        <!-- Private classes -->
        <signature>.*QCollatorSortKeyPrivate.*</signature>
        <signature>.*QMimeTypePrivate.*</signature>
        <!-- Ambigous type signature; smoke does not match
             exactly one of the defined numeric types-->
        <signature>QFlag\* QFlag::QFlag\(long\)</signature>
        <signature>QFlag\* QFlag::QFlag\(unsigned long\)</signature>
        <!-- Deleted methods -->
        <signature>.*QResource::QResource\(const QResource&amp;\).*</signature>
        <signature>QBasicMutex\* QBasicMutex::QBasicMutex\(const QBasicMutex&amp;\)</signature>
        <signature>QCborStreamWriter\* QCborStreamWriter::QCborStreamWriter\(const QCborStreamWriter&amp;\)</signature>
        <signature>QCborStreamWriter&amp; QCborStreamWriter::operator=\(const QCborStreamWriter&amp;\)</signature>
        <!-- This is the type system failing to understand "Connection" actually
             is ::QMetaObject::Connection -->
        <signature>QMetaObject::Connection\* QMetaObject::Connection::Connection\(const Connection&amp;\)</signature>
        <!-- Not sure where the parser found operator void*() -->
        <signature>void\* QMetaObject::Connection::operator void\*\(\) const</signature>
        <!-- For Q*Application::compressEvent, which is internal, can be
             called from any thread and cannot meaningfully be overridden
             because that needs access to qt internals -->
        <signature>.*compressEvent.*</signature>
        <!-- Thread related stuff belongs to the bindings language -->
        <signature>.*QtConcurrent.*</signature>
        <!-- this doesn't link, internal stuff.. -->
        <signature>.*qFindString.*</signature>
        <!-- windows internal helper functions -->
        <signature>.*qFrom.*Endian_helper.*</signature>
        <!-- QGlobalSpace: "static" and "QGlobalSpace::" strings are not present when filtering -->
        <!-- Some of these are the result of parse errors. -->
        <!-- There seems to be a parsing problem with the QCbor* classes -->
        <!-- operator[] does not make sense in global space? -->
        <signature>const QCborValue operator\[\]\(.*</signature>
        <signature>QCborValueRef operator\[\]\(.*</signature>
        <signature>QCborArray operator\+\(const QCborValue&amp;\)</signature>
        <signature>QCborArray&amp; operator&lt;&lt;\(const QCborValue&amp;\)</signature>
        <signature>QCborArray&amp; operator\+=\(const QCborValue&amp;\)</signature>
        <signature>QCborValue&amp; operator=\(const QCborValue&amp;\)</signature>
        <signature>bool operator&lt;\(const QCborArray&amp;\)</signature>
        <signature>bool operator!=\(const QCborValue&amp;\)</signature>
        <signature>bool operator==\(const QCborValue&amp;\)</signature>
        <signature>bool operator&lt;\(const QCborValue&amp;\)</signature>
        <signature>bool operator&lt;\(const QCborMap&amp;\)</signature>
        <signature>bool operator!\(\)</signature>
        <signature>void\* operator-&gt;\(\)</signature>
        <!-- This function is templated -->
        <signature>QDebug operator&lt;&lt;\(QDebug,.*</signature>
        <!-- QUrlTwoFlags is templated -->
        <signature>QUrlTwoFlags operator.*</signature>
        <signature>QUrlTwoFlags&amp; operator.*</signature>
        <!-- More template functions -->
        <signature>Code operator Code\(\)</signature>
        <signature>E2 operator int\(\)</signature>
        <signature>E2 operator QFlags&lt;E2&gt;\(\)</signature>
        <signature>E2 operator QFlags&lt;E1&gt;\(\)</signature>
    </exclude>
    <functions>
        <!-- include functions starting with 'q' -->
        <name>^q.*</name>
        <name>.*::q.*</name>
        <!-- and operators -->
        <name>.*operator.*</name>
    </functions>
    <classList>
        <class>QAbstractAnimation</class>
        <class>QAbstractEventDispatcher</class>
        <class>QAbstractItemModel</class>
        <class>QAbstractListModel</class>
        <class>QAbstractNativeEventFilter</class>
        <class>QAbstractProxyModel</class>
        <class>QAbstractState</class>
        <class>QAbstractTableModel</class>
        <class>QAbstractTransition</class>
        <class>QAnimationDriver</class>
        <class>QAnimationGroup</class>
        <class>QAssociativeIterable</class>
        <class>QAtomicInt</class>
        <class>QBasicAtomicInt</class>
        <class>QBasicMutex</class>
        <class>QBasicTimer</class>
        <class>QBitArray</class>
        <class>QBitRef</class>
        <class>QBuffer</class>
        <class>QByteArray</class>
        <class>QByteArrayMatcher</class>
        <class>QByteRef</class>
        <class>QCborArray</class>
        <class>QCborMap</class>
        <class>QCborStreamReader</class>
        <class>QCborStreamWriter</class>
        <class>QCborValue</class>
        <class>QCborValueRef</class>
        <class>QChar</class>
        <class>QCharRef</class>
        <class>QChildEvent</class>
        <class>QCollator</class>
        <class>QCollatorSortKey</class>
        <class>QCommandLineOption</class>
        <class>QCommandLineParser</class>
        <class>QCoreApplication</class>
        <class>QCryptographicHash</class>
        <class>QDataStream</class>
        <class>QDate</class>
        <class>QDateTime</class>
        <class>QDeadlineTimer</class>
        <class>QDebug</class>
        <class>QDebugStateSaver</class>
        <class>QDeferredDeleteEvent</class>
        <class>QDir</class>
        <class>QDirIterator</class>
        <class>QDynamicPropertyChangeEvent</class>
        <class>QEasingCurve</class>
        <class>QElapsedTimer</class>
        <class>QEvent</class>
        <class>QEventLoop</class>
        <class>QEventLoopLocker</class>
        <class>QEventTransition</class>
        <class>QException</class>
        <class>QFactoryInterface</class>
        <class>QFile</class>
        <class>QFileDevice</class>
        <class>QFileInfo</class>
        <class>QFileSelector</class>
        <class>QFileSystemWatcher</class>
        <class>QFinalState</class>
        <class>QFlag</class>
        <class>QFutureInterfaceBase</class>
        <class>QFutureWatcherBase</class>
        <class>QGenericArgument</class>
        <class>QGenericReturnArgument</class>
        <class>QHistoryState</class>
        <class>QIdentityProxyModel</class>
        <class>QIncompatibleFlag</class>
        <class>QInternal</class>
        <class>QIODevice</class>
        <class>QItemSelection</class>
        <class>QItemSelectionModel</class>
        <class>QItemSelectionRange</class>
        <class>QJsonArray</class>
        <class>QJsonDocument</class>
        <class>QJsonObject</class>
        <class>QJsonValue</class>
        <class>QJsonValueRef</class>
        <class>QLatin1Char</class>
        <class>QLatin1String</class>
        <class>QLibrary</class>
        <class>QLibraryInfo</class>
        <class>QLine</class>
        <class>QLineF</class>
        <class>QLocale</class>
        <class>QLockFile</class>
        <class>QLoggingCategory</class>
        <class>QMacAutoReleasePool</class>
        <class>QMargins</class>
        <class>QMessageAuthenticationCode</class>
        <class>QMessageLogger</class>
        <class>QMetaClassInfo</class>
        <class>QMetaEnum</class>
        <class>QMetaMethod</class>
        <class>QMetaObject</class>
        <class>QMetaObject::Connection</class>
        <class>QMetaProperty</class>
        <class>QMetaType</class>
        <class>QMimeData</class>
        <class>QMimeDatabase</class>
        <class>QMimeType</class>
        <class>QModelIndex</class>
        <class>QMutex</class>
        <class>QMutexLocker</class>
        <class>QNoDebug</class>
        <class>QObject</class>
        <class>QObjectCleanupHandler</class>
        <class>QObjectData</class>
        <class>QObjectUserData</class>
        <class>QOperatingSystemVersion</class>
        <class>QParallelAnimationGroup</class>
        <class>QPauseAnimation</class>
        <class>QPersistentModelIndex</class>
        <class>QPluginLoader</class>
        <class>QPoint</class>
        <class>QPointF</class>
        <class>QProcess</class>
        <class>QProcessEnvironment</class>
        <class>QPropertyAnimation</class>
        <class>QReadLocker</class>
        <class>QReadWriteLock</class>
        <class>QRect</class>
        <class>QRectF</class>
        <class>QRegExp</class>
        <class>QRegularExpression</class>
        <class>QRegularExpressionMatch</class>
        <class>QRegularExpressionMatchIterator</class>
        <class>QResource</class>
        <class>QRunnable</class>
        <class>QSaveFile</class>
        <class>QSemaphore</class>
        <class>QSequentialAnimationGroup</class>
        <class>QSequentialIterable</class>
        <class>QSettings</class>
        <class>QSharedData</class>
        <class>QSharedMemory</class>
        <class>QSignalMapper</class>
        <class>QSignalTransition</class>
        <class>QSize</class>
        <class>QSizeF</class>
        <class>QSocketNotifier</class>
        <class>QSortFilterProxyModel</class>
        <class>QSortFilterProxyModelGreaterThan</class>
        <class>QSortFilterProxyModelLessThan</class>
        <class>QStandardPaths</class>
        <class>QState</class>
        <class>QStateMachine</class>
        <class>QStateMachine::SignalEvent</class>
        <class>QStateMachine::WrappedEvent</class>
        <class>QStorageInfo</class>
        <class>QStringListModel</class>
        <class>QStringMatcher</class>
        <class>QStringRef</class>
        <class>QSysInfo</class>
        <class>QSystemSemaphore</class>
        <class>QTemporaryDir</class>
        <class>QTemporaryFile</class>
        <class>QTextBoundaryFinder</class>
        <class>QTextCodec</class>
        <class>QTextCodec::ConverterState</class>
        <class>QTextDecoder</class>
        <class>QTextEncoder</class>
        <class>QTextStreamManipulator</class>
        <class>QTextStream</class>
        <!-- QThread, QThreadPool, QThreadStorageData should use ruby facilities -->
        <class>QTime</class>
        <class>QTimeLine</class>
        <class>QTimer</class>
        <class>QTimerEvent</class>
        <class>QTimeZone</class>
        <class>QTranslator</class>
        <class>QUnhandledException</class>
        <class>QUrl</class>
        <class>QUrlQuery</class>
        <class>QUuid</class>
        <class>QVariant</class>
        <class>QVariantAnimation</class>
        <class>QVariantComparisonHelper</class>
        <class>QWaitCondition</class>
        <class>QWinEventNotifier</class>
        <class>QWriteLocker</class>
        <class>QXmlStreamAttribute</class>
        <class>QXmlStreamAttributes</class>
        <class>QXmlStreamEntityDeclaration</class>
        <class>QXmlStreamEntityResolver</class>
        <class>QXmlStreamNamespaceDeclaration</class>
        <class>QXmlStreamNotationDeclaration</class>
        <class>QXmlStreamReader</class>
        <class>QXmlStreamStringRef</class>
        <class>QXmlStreamWriter</class>

        <!-- namespaces -->
        <class>Qt</class>
     </classList>
</config>
